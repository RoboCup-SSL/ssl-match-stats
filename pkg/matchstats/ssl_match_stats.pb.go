// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.22.3
// source: ssl_match_stats.proto

package matchstats

import (
	referee "github.com/RoboCup-SSL/ssl-match-stats/internal/referee"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TeamColor int32

const (
	TeamColor_TEAM_UNKNOWN TeamColor = 0
	TeamColor_TEAM_YELLOW  TeamColor = 1
	TeamColor_TEAM_BLUE    TeamColor = 2
	TeamColor_TEAM_NONE    TeamColor = 3
)

// Enum value maps for TeamColor.
var (
	TeamColor_name = map[int32]string{
		0: "TEAM_UNKNOWN",
		1: "TEAM_YELLOW",
		2: "TEAM_BLUE",
		3: "TEAM_NONE",
	}
	TeamColor_value = map[string]int32{
		"TEAM_UNKNOWN": 0,
		"TEAM_YELLOW":  1,
		"TEAM_BLUE":    2,
		"TEAM_NONE":    3,
	}
)

func (x TeamColor) Enum() *TeamColor {
	p := new(TeamColor)
	*p = x
	return p
}

func (x TeamColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeamColor) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_match_stats_proto_enumTypes[0].Descriptor()
}

func (TeamColor) Type() protoreflect.EnumType {
	return &file_ssl_match_stats_proto_enumTypes[0]
}

func (x TeamColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeamColor.Descriptor instead.
func (TeamColor) EnumDescriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{0}
}

type CommandType int32

const (
	CommandType_COMMAND_UNKNOWN         CommandType = 0
	CommandType_COMMAND_HALT            CommandType = 1
	CommandType_COMMAND_STOP            CommandType = 2
	CommandType_COMMAND_BALL_PLACEMENT  CommandType = 3
	CommandType_COMMAND_NORMAL_START    CommandType = 4
	CommandType_COMMAND_FORCE_START     CommandType = 5
	CommandType_COMMAND_DIRECT_FREE     CommandType = 6
	CommandType_COMMAND_INDIRECT_FREE   CommandType = 7
	CommandType_COMMAND_PREPARE_KICKOFF CommandType = 8
	CommandType_COMMAND_PREPARE_PENALTY CommandType = 9
	CommandType_COMMAND_TIMEOUT         CommandType = 10
	CommandType_COMMAND_GOAL            CommandType = 11
)

// Enum value maps for CommandType.
var (
	CommandType_name = map[int32]string{
		0:  "COMMAND_UNKNOWN",
		1:  "COMMAND_HALT",
		2:  "COMMAND_STOP",
		3:  "COMMAND_BALL_PLACEMENT",
		4:  "COMMAND_NORMAL_START",
		5:  "COMMAND_FORCE_START",
		6:  "COMMAND_DIRECT_FREE",
		7:  "COMMAND_INDIRECT_FREE",
		8:  "COMMAND_PREPARE_KICKOFF",
		9:  "COMMAND_PREPARE_PENALTY",
		10: "COMMAND_TIMEOUT",
		11: "COMMAND_GOAL",
	}
	CommandType_value = map[string]int32{
		"COMMAND_UNKNOWN":         0,
		"COMMAND_HALT":            1,
		"COMMAND_STOP":            2,
		"COMMAND_BALL_PLACEMENT":  3,
		"COMMAND_NORMAL_START":    4,
		"COMMAND_FORCE_START":     5,
		"COMMAND_DIRECT_FREE":     6,
		"COMMAND_INDIRECT_FREE":   7,
		"COMMAND_PREPARE_KICKOFF": 8,
		"COMMAND_PREPARE_PENALTY": 9,
		"COMMAND_TIMEOUT":         10,
		"COMMAND_GOAL":            11,
	}
)

func (x CommandType) Enum() *CommandType {
	p := new(CommandType)
	*p = x
	return p
}

func (x CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_match_stats_proto_enumTypes[1].Descriptor()
}

func (CommandType) Type() protoreflect.EnumType {
	return &file_ssl_match_stats_proto_enumTypes[1]
}

func (x CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandType.Descriptor instead.
func (CommandType) EnumDescriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{1}
}

type StageType int32

const (
	StageType_STAGE_UNKNOWN                StageType = 0
	StageType_STAGE_NORMAL_FIRST_HALF_PRE  StageType = 1
	StageType_STAGE_NORMAL_FIRST_HALF      StageType = 2
	StageType_STAGE_NORMAL_HALF_TIME       StageType = 3
	StageType_STAGE_NORMAL_SECOND_HALF_PRE StageType = 4
	StageType_STAGE_NORMAL_SECOND_HALF     StageType = 5
	StageType_STAGE_EXTRA_TIME_BREAK       StageType = 6
	StageType_STAGE_EXTRA_FIRST_HALF_PRE   StageType = 7
	StageType_STAGE_EXTRA_FIRST_HALF       StageType = 8
	StageType_STAGE_EXTRA_HALF_TIME        StageType = 9
	StageType_STAGE_EXTRA_SECOND_HALF_PRE  StageType = 10
	StageType_STAGE_EXTRA_SECOND_HALF      StageType = 11
	StageType_STAGE_PENALTY_SHOOTOUT_BREAK StageType = 12
	StageType_STAGE_PENALTY_SHOOTOUT       StageType = 13
	StageType_STAGE_POST_GAME              StageType = 14
)

// Enum value maps for StageType.
var (
	StageType_name = map[int32]string{
		0:  "STAGE_UNKNOWN",
		1:  "STAGE_NORMAL_FIRST_HALF_PRE",
		2:  "STAGE_NORMAL_FIRST_HALF",
		3:  "STAGE_NORMAL_HALF_TIME",
		4:  "STAGE_NORMAL_SECOND_HALF_PRE",
		5:  "STAGE_NORMAL_SECOND_HALF",
		6:  "STAGE_EXTRA_TIME_BREAK",
		7:  "STAGE_EXTRA_FIRST_HALF_PRE",
		8:  "STAGE_EXTRA_FIRST_HALF",
		9:  "STAGE_EXTRA_HALF_TIME",
		10: "STAGE_EXTRA_SECOND_HALF_PRE",
		11: "STAGE_EXTRA_SECOND_HALF",
		12: "STAGE_PENALTY_SHOOTOUT_BREAK",
		13: "STAGE_PENALTY_SHOOTOUT",
		14: "STAGE_POST_GAME",
	}
	StageType_value = map[string]int32{
		"STAGE_UNKNOWN":                0,
		"STAGE_NORMAL_FIRST_HALF_PRE":  1,
		"STAGE_NORMAL_FIRST_HALF":      2,
		"STAGE_NORMAL_HALF_TIME":       3,
		"STAGE_NORMAL_SECOND_HALF_PRE": 4,
		"STAGE_NORMAL_SECOND_HALF":     5,
		"STAGE_EXTRA_TIME_BREAK":       6,
		"STAGE_EXTRA_FIRST_HALF_PRE":   7,
		"STAGE_EXTRA_FIRST_HALF":       8,
		"STAGE_EXTRA_HALF_TIME":        9,
		"STAGE_EXTRA_SECOND_HALF_PRE":  10,
		"STAGE_EXTRA_SECOND_HALF":      11,
		"STAGE_PENALTY_SHOOTOUT_BREAK": 12,
		"STAGE_PENALTY_SHOOTOUT":       13,
		"STAGE_POST_GAME":              14,
	}
)

func (x StageType) Enum() *StageType {
	p := new(StageType)
	*p = x
	return p
}

func (x StageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_match_stats_proto_enumTypes[2].Descriptor()
}

func (StageType) Type() protoreflect.EnumType {
	return &file_ssl_match_stats_proto_enumTypes[2]
}

func (x StageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageType.Descriptor instead.
func (StageType) EnumDescriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{2}
}

type GamePhaseType int32

const (
	GamePhaseType_PHASE_UNKNOWN         GamePhaseType = 0
	GamePhaseType_PHASE_RUNNING         GamePhaseType = 1
	GamePhaseType_PHASE_PREPARE_KICKOFF GamePhaseType = 2
	GamePhaseType_PHASE_PREPARE_PENALTY GamePhaseType = 3
	GamePhaseType_PHASE_STOP            GamePhaseType = 4
	GamePhaseType_PHASE_BALL_PLACEMENT  GamePhaseType = 5
	GamePhaseType_PHASE_TIMEOUT         GamePhaseType = 6
	GamePhaseType_PHASE_BREAK           GamePhaseType = 7
	GamePhaseType_PHASE_HALT            GamePhaseType = 8
	GamePhaseType_PHASE_POST_GAME       GamePhaseType = 9
)

// Enum value maps for GamePhaseType.
var (
	GamePhaseType_name = map[int32]string{
		0: "PHASE_UNKNOWN",
		1: "PHASE_RUNNING",
		2: "PHASE_PREPARE_KICKOFF",
		3: "PHASE_PREPARE_PENALTY",
		4: "PHASE_STOP",
		5: "PHASE_BALL_PLACEMENT",
		6: "PHASE_TIMEOUT",
		7: "PHASE_BREAK",
		8: "PHASE_HALT",
		9: "PHASE_POST_GAME",
	}
	GamePhaseType_value = map[string]int32{
		"PHASE_UNKNOWN":         0,
		"PHASE_RUNNING":         1,
		"PHASE_PREPARE_KICKOFF": 2,
		"PHASE_PREPARE_PENALTY": 3,
		"PHASE_STOP":            4,
		"PHASE_BALL_PLACEMENT":  5,
		"PHASE_TIMEOUT":         6,
		"PHASE_BREAK":           7,
		"PHASE_HALT":            8,
		"PHASE_POST_GAME":       9,
	}
)

func (x GamePhaseType) Enum() *GamePhaseType {
	p := new(GamePhaseType)
	*p = x
	return p
}

func (x GamePhaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GamePhaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_match_stats_proto_enumTypes[3].Descriptor()
}

func (GamePhaseType) Type() protoreflect.EnumType {
	return &file_ssl_match_stats_proto_enumTypes[3]
}

func (x GamePhaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GamePhaseType.Descriptor instead.
func (GamePhaseType) EnumDescriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{3}
}

// MatchType is a meta information about the current match for easier log processing
type StatsMatchType int32

const (
	// not set
	StatsMatchType_MATCH_UNKNOWN StatsMatchType = 0
	// match is part of the group phase
	StatsMatchType_MATCH_GROUP_PHASE StatsMatchType = 1
	// match is part of the elimination phase
	StatsMatchType_MATCH_ELIMINATION_PHASE StatsMatchType = 2
	// a friendly match, not part of a tournament
	StatsMatchType_MATCH_FRIENDLY StatsMatchType = 3
)

// Enum value maps for StatsMatchType.
var (
	StatsMatchType_name = map[int32]string{
		0: "MATCH_UNKNOWN",
		1: "MATCH_GROUP_PHASE",
		2: "MATCH_ELIMINATION_PHASE",
		3: "MATCH_FRIENDLY",
	}
	StatsMatchType_value = map[string]int32{
		"MATCH_UNKNOWN":           0,
		"MATCH_GROUP_PHASE":       1,
		"MATCH_ELIMINATION_PHASE": 2,
		"MATCH_FRIENDLY":          3,
	}
)

func (x StatsMatchType) Enum() *StatsMatchType {
	p := new(StatsMatchType)
	*p = x
	return p
}

func (x StatsMatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatsMatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_match_stats_proto_enumTypes[4].Descriptor()
}

func (StatsMatchType) Type() protoreflect.EnumType {
	return &file_ssl_match_stats_proto_enumTypes[4]
}

func (x StatsMatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatsMatchType.Descriptor instead.
func (StatsMatchType) EnumDescriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{4}
}

// GameEventCategory is a derived category for the game event type
type GameEventCategory int32

const (
	GameEventCategory_CATEGORY_UNKNOWN  GameEventCategory = 0
	GameEventCategory_CATEGORY_BALL_OUT GameEventCategory = 1
	GameEventCategory_CATEGORY_FOUL     GameEventCategory = 2
	GameEventCategory_CATEGORY_GOAL     GameEventCategory = 3
	GameEventCategory_CATEGORY_OTHER    GameEventCategory = 4
)

// Enum value maps for GameEventCategory.
var (
	GameEventCategory_name = map[int32]string{
		0: "CATEGORY_UNKNOWN",
		1: "CATEGORY_BALL_OUT",
		2: "CATEGORY_FOUL",
		3: "CATEGORY_GOAL",
		4: "CATEGORY_OTHER",
	}
	GameEventCategory_value = map[string]int32{
		"CATEGORY_UNKNOWN":  0,
		"CATEGORY_BALL_OUT": 1,
		"CATEGORY_FOUL":     2,
		"CATEGORY_GOAL":     3,
		"CATEGORY_OTHER":    4,
	}
)

func (x GameEventCategory) Enum() *GameEventCategory {
	p := new(GameEventCategory)
	*p = x
	return p
}

func (x GameEventCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameEventCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_match_stats_proto_enumTypes[5].Descriptor()
}

func (GameEventCategory) Type() protoreflect.EnumType {
	return &file_ssl_match_stats_proto_enumTypes[5]
}

func (x GameEventCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameEventCategory.Descriptor instead.
func (GameEventCategory) EnumDescriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{5}
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      CommandType `protobuf:"varint,1,opt,name=type,proto3,enum=CommandType" json:"type,omitempty"`
	ForTeam   TeamColor   `protobuf:"varint,2,opt,name=for_team,json=forTeam,proto3,enum=TeamColor" json:"for_team,omitempty"`
	Timestamp uint64      `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_match_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_match_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{0}
}

func (x *Command) GetType() CommandType {
	if x != nil {
		return x.Type
	}
	return CommandType_COMMAND_UNKNOWN
}

func (x *Command) GetForTeam() TeamColor {
	if x != nil {
		return x.ForTeam
	}
	return TeamColor_TEAM_UNKNOWN
}

func (x *Command) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GamePhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [microseconds]
	StartTime uint64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// [microseconds]
	EndTime uint64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// [microseconds]
	Duration            int64                `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Type                GamePhaseType        `protobuf:"varint,4,opt,name=type,proto3,enum=GamePhaseType" json:"type,omitempty"`
	CommandEntry        *Command             `protobuf:"bytes,5,opt,name=command_entry,json=commandEntry,proto3" json:"command_entry,omitempty"`
	CommandExit         *Command             `protobuf:"bytes,6,opt,name=command_exit,json=commandExit,proto3" json:"command_exit,omitempty"`
	ForTeam             TeamColor            `protobuf:"varint,7,opt,name=for_team,json=forTeam,proto3,enum=TeamColor" json:"for_team,omitempty"`
	GameEventsEntry     []*referee.GameEvent `protobuf:"bytes,8,rep,name=game_events_entry,json=gameEventsEntry,proto3" json:"game_events_entry,omitempty"`
	GameEventsExit      []*referee.GameEvent `protobuf:"bytes,9,rep,name=game_events_exit,json=gameEventsExit,proto3" json:"game_events_exit,omitempty"`
	NextCommandProposed *Command             `protobuf:"bytes,10,opt,name=next_command_proposed,json=nextCommandProposed,proto3" json:"next_command_proposed,omitempty"`
	Stage               StageType            `protobuf:"varint,11,opt,name=stage,proto3,enum=StageType" json:"stage,omitempty"`
	StageTimeLeftEntry  int64                `protobuf:"varint,12,opt,name=stage_time_left_entry,json=stageTimeLeftEntry,proto3" json:"stage_time_left_entry,omitempty"`
	StageTimeLeftExit   int64                `protobuf:"varint,13,opt,name=stage_time_left_exit,json=stageTimeLeftExit,proto3" json:"stage_time_left_exit,omitempty"`
	CommandPrev         *Command             `protobuf:"bytes,14,opt,name=command_prev,json=commandPrev,proto3" json:"command_prev,omitempty"`
	GameEventsApplied   []*GameEventTimed    `protobuf:"bytes,15,rep,name=game_events_applied,json=gameEventsApplied,proto3" json:"game_events_applied,omitempty"`
	GameEventsProposed  []*GameEventTimed    `protobuf:"bytes,16,rep,name=game_events_proposed,json=gameEventsProposed,proto3" json:"game_events_proposed,omitempty"`
}

func (x *GamePhase) Reset() {
	*x = GamePhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_match_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePhase) ProtoMessage() {}

func (x *GamePhase) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_match_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePhase.ProtoReflect.Descriptor instead.
func (*GamePhase) Descriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{1}
}

func (x *GamePhase) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GamePhase) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GamePhase) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *GamePhase) GetType() GamePhaseType {
	if x != nil {
		return x.Type
	}
	return GamePhaseType_PHASE_UNKNOWN
}

func (x *GamePhase) GetCommandEntry() *Command {
	if x != nil {
		return x.CommandEntry
	}
	return nil
}

func (x *GamePhase) GetCommandExit() *Command {
	if x != nil {
		return x.CommandExit
	}
	return nil
}

func (x *GamePhase) GetForTeam() TeamColor {
	if x != nil {
		return x.ForTeam
	}
	return TeamColor_TEAM_UNKNOWN
}

func (x *GamePhase) GetGameEventsEntry() []*referee.GameEvent {
	if x != nil {
		return x.GameEventsEntry
	}
	return nil
}

func (x *GamePhase) GetGameEventsExit() []*referee.GameEvent {
	if x != nil {
		return x.GameEventsExit
	}
	return nil
}

func (x *GamePhase) GetNextCommandProposed() *Command {
	if x != nil {
		return x.NextCommandProposed
	}
	return nil
}

func (x *GamePhase) GetStage() StageType {
	if x != nil {
		return x.Stage
	}
	return StageType_STAGE_UNKNOWN
}

func (x *GamePhase) GetStageTimeLeftEntry() int64 {
	if x != nil {
		return x.StageTimeLeftEntry
	}
	return 0
}

func (x *GamePhase) GetStageTimeLeftExit() int64 {
	if x != nil {
		return x.StageTimeLeftExit
	}
	return 0
}

func (x *GamePhase) GetCommandPrev() *Command {
	if x != nil {
		return x.CommandPrev
	}
	return nil
}

func (x *GamePhase) GetGameEventsApplied() []*GameEventTimed {
	if x != nil {
		return x.GameEventsApplied
	}
	return nil
}

func (x *GamePhase) GetGameEventsProposed() []*GameEventTimed {
	if x != nil {
		return x.GameEventsProposed
	}
	return nil
}

type GameEventTimed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameEvent *referee.GameEvent `protobuf:"bytes,1,opt,name=game_event,json=gameEvent,proto3" json:"game_event,omitempty"`
	Timestamp uint64             `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Withdrawn bool               `protobuf:"varint,3,opt,name=withdrawn,proto3" json:"withdrawn,omitempty"`
	Category  GameEventCategory  `protobuf:"varint,4,opt,name=category,proto3,enum=GameEventCategory" json:"category,omitempty"`
}

func (x *GameEventTimed) Reset() {
	*x = GameEventTimed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_match_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEventTimed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEventTimed) ProtoMessage() {}

func (x *GameEventTimed) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_match_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEventTimed.ProtoReflect.Descriptor instead.
func (*GameEventTimed) Descriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{2}
}

func (x *GameEventTimed) GetGameEvent() *referee.GameEvent {
	if x != nil {
		return x.GameEvent
	}
	return nil
}

func (x *GameEventTimed) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GameEventTimed) GetWithdrawn() bool {
	if x != nil {
		return x.Withdrawn
	}
	return false
}

func (x *GameEventTimed) GetCategory() GameEventCategory {
	if x != nil {
		return x.Category
	}
	return GameEventCategory_CATEGORY_UNKNOWN
}

type TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Goals       int32  `protobuf:"varint,2,opt,name=goals,proto3" json:"goals,omitempty"`
	Fouls       int32  `protobuf:"varint,3,opt,name=fouls,proto3" json:"fouls,omitempty"`
	YellowCards int32  `protobuf:"varint,4,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellow_cards,omitempty"`
	RedCards    int32  `protobuf:"varint,5,opt,name=red_cards,json=redCards,proto3" json:"red_cards,omitempty"`
	// [microseconds]
	TimeoutTime         int64 `protobuf:"varint,6,opt,name=timeout_time,json=timeoutTime,proto3" json:"timeout_time,omitempty"`
	TimeoutsTaken       int32 `protobuf:"varint,7,opt,name=timeouts_taken,json=timeoutsTaken,proto3" json:"timeouts_taken,omitempty"`
	TimeoutsLeft        int32 `protobuf:"varint,14,opt,name=timeouts_left,json=timeoutsLeft,proto3" json:"timeouts_left,omitempty"`
	PenaltyShotsTotal   int32 `protobuf:"varint,8,opt,name=penalty_shots_total,json=penaltyShotsTotal,proto3" json:"penalty_shots_total,omitempty"`
	PenaltyShotsSuccess int32 `protobuf:"varint,9,opt,name=penalty_shots_success,json=penaltyShotsSuccess,proto3" json:"penalty_shots_success,omitempty"`
	ConcededGoals       int32 `protobuf:"varint,10,opt,name=conceded_goals,json=concededGoals,proto3" json:"conceded_goals,omitempty"`
	// [microseconds]
	BallPlacementTime    int64 `protobuf:"varint,11,opt,name=ball_placement_time,json=ballPlacementTime,proto3" json:"ball_placement_time,omitempty"`
	BallPlacements       int32 `protobuf:"varint,12,opt,name=ball_placements,json=ballPlacements,proto3" json:"ball_placements,omitempty"`
	MaxActiveYellowCards int32 `protobuf:"varint,13,opt,name=max_active_yellow_cards,json=maxActiveYellowCards,proto3" json:"max_active_yellow_cards,omitempty"`
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_match_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_match_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{3}
}

func (x *TeamStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamStats) GetGoals() int32 {
	if x != nil {
		return x.Goals
	}
	return 0
}

func (x *TeamStats) GetFouls() int32 {
	if x != nil {
		return x.Fouls
	}
	return 0
}

func (x *TeamStats) GetYellowCards() int32 {
	if x != nil {
		return x.YellowCards
	}
	return 0
}

func (x *TeamStats) GetRedCards() int32 {
	if x != nil {
		return x.RedCards
	}
	return 0
}

func (x *TeamStats) GetTimeoutTime() int64 {
	if x != nil {
		return x.TimeoutTime
	}
	return 0
}

func (x *TeamStats) GetTimeoutsTaken() int32 {
	if x != nil {
		return x.TimeoutsTaken
	}
	return 0
}

func (x *TeamStats) GetTimeoutsLeft() int32 {
	if x != nil {
		return x.TimeoutsLeft
	}
	return 0
}

func (x *TeamStats) GetPenaltyShotsTotal() int32 {
	if x != nil {
		return x.PenaltyShotsTotal
	}
	return 0
}

func (x *TeamStats) GetPenaltyShotsSuccess() int32 {
	if x != nil {
		return x.PenaltyShotsSuccess
	}
	return 0
}

func (x *TeamStats) GetConcededGoals() int32 {
	if x != nil {
		return x.ConcededGoals
	}
	return 0
}

func (x *TeamStats) GetBallPlacementTime() int64 {
	if x != nil {
		return x.BallPlacementTime
	}
	return 0
}

func (x *TeamStats) GetBallPlacements() int32 {
	if x != nil {
		return x.BallPlacements
	}
	return 0
}

func (x *TeamStats) GetMaxActiveYellowCards() int32 {
	if x != nil {
		return x.MaxActiveYellowCards
	}
	return 0
}

type MatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type StatsMatchType `protobuf:"varint,11,opt,name=type,proto3,enum=StatsMatchType" json:"type,omitempty"`
	// [microseconds]
	MatchDuration int64 `protobuf:"varint,2,opt,name=match_duration,json=matchDuration,proto3" json:"match_duration,omitempty"`
	// unix timestamp [microseconds]
	StartTime       uint64       `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	GamePhases      []*GamePhase `protobuf:"bytes,3,rep,name=game_phases,json=gamePhases,proto3" json:"game_phases,omitempty"`
	ExtraTime       bool         `protobuf:"varint,4,opt,name=extra_time,json=extraTime,proto3" json:"extra_time,omitempty"`
	Shootout        bool         `protobuf:"varint,5,opt,name=shootout,proto3" json:"shootout,omitempty"`
	TeamStatsYellow *TeamStats   `protobuf:"bytes,6,opt,name=team_stats_yellow,json=teamStatsYellow,proto3" json:"team_stats_yellow,omitempty"`
	TeamStatsBlue   *TeamStats   `protobuf:"bytes,7,opt,name=team_stats_blue,json=teamStatsBlue,proto3" json:"team_stats_blue,omitempty"`
}

func (x *MatchStats) Reset() {
	*x = MatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_match_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStats) ProtoMessage() {}

func (x *MatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_match_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStats.ProtoReflect.Descriptor instead.
func (*MatchStats) Descriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{4}
}

func (x *MatchStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MatchStats) GetType() StatsMatchType {
	if x != nil {
		return x.Type
	}
	return StatsMatchType_MATCH_UNKNOWN
}

func (x *MatchStats) GetMatchDuration() int64 {
	if x != nil {
		return x.MatchDuration
	}
	return 0
}

func (x *MatchStats) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MatchStats) GetGamePhases() []*GamePhase {
	if x != nil {
		return x.GamePhases
	}
	return nil
}

func (x *MatchStats) GetExtraTime() bool {
	if x != nil {
		return x.ExtraTime
	}
	return false
}

func (x *MatchStats) GetShootout() bool {
	if x != nil {
		return x.Shootout
	}
	return false
}

func (x *MatchStats) GetTeamStatsYellow() *TeamStats {
	if x != nil {
		return x.TeamStatsYellow
	}
	return nil
}

func (x *MatchStats) GetTeamStatsBlue() *TeamStats {
	if x != nil {
		return x.TeamStatsBlue
	}
	return nil
}

type MatchStatsCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchStats []*MatchStats `protobuf:"bytes,1,rep,name=match_stats,json=matchStats,proto3" json:"match_stats,omitempty"`
}

func (x *MatchStatsCollection) Reset() {
	*x = MatchStatsCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_match_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchStatsCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchStatsCollection) ProtoMessage() {}

func (x *MatchStatsCollection) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_match_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchStatsCollection.ProtoReflect.Descriptor instead.
func (*MatchStatsCollection) Descriptor() ([]byte, []int) {
	return file_ssl_match_stats_proto_rawDescGZIP(), []int{5}
}

func (x *MatchStatsCollection) GetMatchStats() []*MatchStats {
	if x != nil {
		return x.MatchStats
	}
	return nil
}

var File_ssl_match_stats_proto protoreflect.FileDescriptor

var file_ssl_match_stats_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x73, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x70, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x08, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xeb, 0x05, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x45, 0x78, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x0a,
	0x11, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x67, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x15, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2f,
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x45, 0x78, 0x69, 0x74, 0x12,
	0x2b, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x76, 0x12, 0x3f, 0x0a, 0x13,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x41, 0x0a,
	0x14, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x12, 0x67, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x95, 0x04, 0x0a, 0x09, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x6f, 0x61,
	0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53, 0x68, 0x6f,
	0x74, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x53,
	0x68, 0x6f, 0x74, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x64, 0x65, 0x64, 0x47, 0x6f, 0x61,
	0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x6c,
	0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x6f, 0x74, 0x6f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0f, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x32, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0b,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2a, 0x4c, 0x0a, 0x09, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x2a, 0xaa, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x4c,
	0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x10,
	0x08, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x09, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x47,
	0x4f, 0x41, 0x4c, 0x10, 0x0b, 0x2a, 0xbc, 0x03, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41, 0x4c,
	0x46, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x47, 0x45,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x48, 0x41,
	0x4c, 0x46, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45,
	0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x54,
	0x52, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x50,
	0x52, 0x45, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x10,
	0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c,
	0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41,
	0x4b, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x4f, 0x4f, 0x54, 0x4f, 0x55, 0x54, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x47, 0x41,
	0x4d, 0x45, 0x10, 0x0e, 0x2a, 0xde, 0x01, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4b, 0x49,
	0x43, 0x4b, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x4c,
	0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x07,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x10, 0x08,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x10, 0x09, 0x2a, 0x6b, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x4c, 0x49, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x4c, 0x59,
	0x10, 0x03, 0x2a, 0x7a, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x4f,
	0x55, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x46, 0x4f, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x42, 0x37,
	0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x62,
	0x6f, 0x43, 0x75, 0x70, 0x2d, 0x53, 0x53, 0x4c, 0x2f, 0x73, 0x73, 0x6c, 0x2d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x73, 0x74, 0x61, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ssl_match_stats_proto_rawDescOnce sync.Once
	file_ssl_match_stats_proto_rawDescData = file_ssl_match_stats_proto_rawDesc
)

func file_ssl_match_stats_proto_rawDescGZIP() []byte {
	file_ssl_match_stats_proto_rawDescOnce.Do(func() {
		file_ssl_match_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssl_match_stats_proto_rawDescData)
	})
	return file_ssl_match_stats_proto_rawDescData
}

var file_ssl_match_stats_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ssl_match_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ssl_match_stats_proto_goTypes = []interface{}{
	(TeamColor)(0),               // 0: TeamColor
	(CommandType)(0),             // 1: CommandType
	(StageType)(0),               // 2: StageType
	(GamePhaseType)(0),           // 3: GamePhaseType
	(StatsMatchType)(0),          // 4: StatsMatchType
	(GameEventCategory)(0),       // 5: GameEventCategory
	(*Command)(nil),              // 6: Command
	(*GamePhase)(nil),            // 7: GamePhase
	(*GameEventTimed)(nil),       // 8: GameEventTimed
	(*TeamStats)(nil),            // 9: TeamStats
	(*MatchStats)(nil),           // 10: MatchStats
	(*MatchStatsCollection)(nil), // 11: MatchStatsCollection
	(*referee.GameEvent)(nil),    // 12: GameEvent
}
var file_ssl_match_stats_proto_depIdxs = []int32{
	1,  // 0: Command.type:type_name -> CommandType
	0,  // 1: Command.for_team:type_name -> TeamColor
	3,  // 2: GamePhase.type:type_name -> GamePhaseType
	6,  // 3: GamePhase.command_entry:type_name -> Command
	6,  // 4: GamePhase.command_exit:type_name -> Command
	0,  // 5: GamePhase.for_team:type_name -> TeamColor
	12, // 6: GamePhase.game_events_entry:type_name -> GameEvent
	12, // 7: GamePhase.game_events_exit:type_name -> GameEvent
	6,  // 8: GamePhase.next_command_proposed:type_name -> Command
	2,  // 9: GamePhase.stage:type_name -> StageType
	6,  // 10: GamePhase.command_prev:type_name -> Command
	8,  // 11: GamePhase.game_events_applied:type_name -> GameEventTimed
	8,  // 12: GamePhase.game_events_proposed:type_name -> GameEventTimed
	12, // 13: GameEventTimed.game_event:type_name -> GameEvent
	5,  // 14: GameEventTimed.category:type_name -> GameEventCategory
	4,  // 15: MatchStats.type:type_name -> StatsMatchType
	7,  // 16: MatchStats.game_phases:type_name -> GamePhase
	9,  // 17: MatchStats.team_stats_yellow:type_name -> TeamStats
	9,  // 18: MatchStats.team_stats_blue:type_name -> TeamStats
	10, // 19: MatchStatsCollection.match_stats:type_name -> MatchStats
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_ssl_match_stats_proto_init() }
func file_ssl_match_stats_proto_init() {
	if File_ssl_match_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ssl_match_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_match_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_match_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEventTimed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_match_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_match_stats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_match_stats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchStatsCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssl_match_stats_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssl_match_stats_proto_goTypes,
		DependencyIndexes: file_ssl_match_stats_proto_depIdxs,
		EnumInfos:         file_ssl_match_stats_proto_enumTypes,
		MessageInfos:      file_ssl_match_stats_proto_msgTypes,
	}.Build()
	File_ssl_match_stats_proto = out.File
	file_ssl_match_stats_proto_rawDesc = nil
	file_ssl_match_stats_proto_goTypes = nil
	file_ssl_match_stats_proto_depIdxs = nil
}
